package mau

import (
	"fmt"
	"math"
	"os"
	"text/tabwriter"
)

var bctable []float64 = []float64{
	6, 10, 15, 20, 21, 35, 28, 56, 70, 36, 84, 126,
	45, 120, 210, 252, 55, 165, 330, 462, 66, 220,
	495, 792, 924, 78, 286, 715, 1287, 1716, 91, 364,
	1001, 2002, 3003, 3432, 105, 455, 1365, 3003, 5005,
	6435, 120, 560, 1820, 4368, 8008, 11440, 12870, 136,
	680, 2380, 6188, 12376, 19448, 24310, 153, 816, 3060,
	8568, 18564, 31824, 43758, 48620, 171, 969, 3876,
	11628, 27132, 50388, 75582, 92378, 190, 1140, 4845,
	15504, 38760, 77520, 125970, 167960, 184756, 210, 1330,
	5985, 20349, 54264, 116280, 203490, 293930, 352716, 231,
	1540, 7315, 26334, 74613, 170544, 319770, 497420,
	646646, 705432, 253, 1771, 8855, 33649, 100947, 245157,
	490314, 817190, 1144066, 1352078, 276, 2024, 10626,
	42504, 134596, 346104, 735471, 1307504, 1961256, 2496144,
	2704156, 300, 2300, 12650, 53130, 177100, 480700,
	1081575, 2042975, 3268760, 4457400, 5200300, 325, 2600,
	14950, 65780, 230230, 657800, 1562275, 3124550, 5311735,
	7726160, 9657700, 10400600, 351, 2925, 17550, 80730,
	296010, 888030, 2220075, 4686825, 8436285, 13037895,
	17383860, 20058300, 378, 3276, 20475, 98280, 376740,
	1184040, 3108105, 6906900, 13123110, 21474180, 30421755,
	37442160, 40116600, 406, 3654, 23751, 118755, 475020,
	1560780, 4292145, 10015005, 20030010, 34597290, 51895935,
	67863915, 77558760, 435, 4060, 27405, 142506, 593775,
	2035800, 5852925, 14307150, 30045015, 54627300, 86493225,
	119759850, 145422675, 155117520, 465, 4495, 31465, 169911,
	736281, 2629575, 7888725, 20160075, 44352165, 84672315,
	141120525, 206253075, 265182525, 300540195, 496, 4960,
	35960, 201376, 906192, 3365856, 10518300, 28048800,
	64512240, 129024480, 225792840, 347373600, 471435600,
	565722720, 601080390, 528, 5456, 40920, 237336, 1107568,
	4272048, 13884156, 38567100, 92561040, 193536720, 354817320,
	573166440, 818809200, 1037158320, 1166803110, 561, 5984,
	46376, 278256, 1344904, 5379616, 18156204, 52451256,
	131128140, 286097760, 548354040, 927983760, 1391975640,
	1855967520, 2203961430, 2333606220, 595, 6545, 52360,
	324632, 1623160, 6724520, 23535820, 70607460, 183579396,
	417225900, 834451800, 1476337800, 2319959400, 3247943160,
	4059928950, 4537567650, 630, 7140, 58905, 376992, 1947792,
	8347680, 30260340, 94143280, 254186856, 600805296,
	1251677700, 2310789600, 3796297200, 5567902560, 7307872110,
	8597496600, 9075135300, 666, 7770, 66045, 435897, 2324784,
	10295472, 38608020, 124403620, 348330136, 854992152,
	1852482996, 3562467300, 6107086800, 9364199760, 12875774670,
	15905368710, 17672631900, 703, 8436, 73815, 501942,
	2760681, 12620256, 48903492, 163011640, 472733756,
	1203322288, 2707475148, 5414950296, 9669554100, 15471286560,
	22239974430, 28781143380, 33578000610, 35345263800, 741,
	9139, 82251, 575757, 3262623, 15380937, 61523748,
	211915132, 635745396, 1676056044, 3910797436, 8122425444,
	15084504396, 25140840660, 37711260990, 51021117810,
	62359143990, 68923264410, 780, 9880, 91390, 658008,
	3838380, 18643560, 76904685, 273438880, 847660528,
	2311801440, 5586853480, 12033222880, 23206929840, 40225345056,
	62852101650, 88732378800, 113380261800, 131282408400,
	137846528820, 820, 10660, 101270, 749398, 4496388,
	22481940, 95548245, 350343565, 1121099408, 3159461968,
	7898654920, 17620076360, 35240152720, 63432274896,
	103077446706, 151584480450, 202112640600, 244662670200,
	269128937220, 861, 11480, 111930, 850668, 5245786,
	26978328, 118030185, 445891810, 1471442973, 4280561376,
	11058116888, 25518731280, 52860229080, 98672427616,
	166509721602, 254661927156, 353697121050, 446775310800,
	513791607420, 538257874440, 903, 12341, 123410, 962598,
	6096454, 32224114, 145008513, 563921995, 1917334783,
	5752004349, 15338678264, 36576848168, 78378960360,
	151532656696, 265182149218, 421171648758, 608359048206,
	800472431850, 960566918220, 1052049481860, 946, 13244,
	135751, 1086008, 7059052, 38320568, 177232627, 708930508,
	2481256778, 7669339132, 21090682613, 51915526432,
	114955808528, 229911617056, 416714805914, 686353797976,
	1029530696964, 1408831480056, 1761039350070, 2012616400080,
	2104098963720, 990, 14190, 148995, 1221759, 8145060,
	45379620, 215553195, 886163135, 3190187286, 10150595910,
	28760021745, 73006209045, 166871334960, 344867425584,
	646626422970, 1103068603890, 1715884494940, 2438362177020,
	3169870830126, 3773655750150, 4116715363800, 1035, 15180,
	163185, 1370754, 9366819, 53524680, 260932815, 1101716330,
	4076350421, 13340783196, 38910617655, 101766230790,
	239877544005, 511738760544, 991493848554, 1749695026860,
	2818953098830, 4154246671960, 5608233007146, 6943526580276,
	7890371113950, 8233430727600, 1081, 16215, 178365, 1533939,
	10737573, 62891499, 314457495, 1362649145, 5178066751,
	17417133617, 52251400851, 140676848445, 341643774795,
	751616304549, 1503232609098, 2741188875414, 4568648125690,
	6973199770790, 9762479679106, 12551759587422, 14833897694226,
	16123801841550, 1128, 17296, 194580, 1712304, 12271512,
	73629072, 377348994, 1677106640, 6540715896, 22595200368,
	69668534468, 192928249296, 482320623240, 1093260079344,
	2254848913647, 4244421484512, 7309837001104, 11541847896480,
	16735679449896, 22314239266528, 27385657281648, 30957699535776,
	32247603683100, 1176, 18424, 211876, 1906884, 13983816,
	85900584, 450978066, 2054455634, 8217822536, 29135916264,
	92263734836, 262596783764, 675248872536, 1575580702584,
	3348108992991, 6499270398159, 11554258485616, 18851684897584,
	28277527346376, 39049918716424, 49699896548176, 58343356817424,
	63205303218876, 1225, 19600, 230300, 2118760, 15890700,
	99884400, 536878650, 2505433700, 10272278170, 37353738800,
	121399651100, 354860518600, 937845656300, 2250829575120,
	4923689695575, 9847379391150, 18053528883775, 30405943383200,
	47129212243960, 67327446062800, 88749815264600, 108043253365600,
	121548660036300, 126410606437752, 1275, 20825, 249900,
	2349060, 18009460, 115775100, 636763050, 3042312350,
	12777711870, 47626016970, 158753389900, 476260169700,
	1292706174900, 3188675231420, 7174519270695, 14771069086725,
	27900908274925, 48459472266975, 77535155627160, 114456658306760,
	156077261327400, 196793068630200, 229591913401900,
	247959266474052, 1326, 22100, 270725, 2598960, 20358520,
	133784560, 752538150, 3679075400, 15820024220, 60403728840,
	206379406870, 635013559600, 1768966344600, 4481381406320,
	10363194502115, 21945588357420, 42671977361650, 76360380541900,
	125994627894135, 191991813933920, 270533919634160,
	352870329957600, 426384982032100, 477551179875952,
	495918532948104, 1378, 23426, 292825, 2869685, 22957480,
	154143080, 886322710, 4431613550, 19499099620, 76223753060,
	266783135710, 841392966470, 2403979904200, 6250347750920,
	14844575908435, 32308782859535, 64617565719070, 119032357903550,
	202355008436035, 317986441828055, 462525733568080,
	623404249591760, 779255311989700, 903936161908052,
	973469712824056, 1431, 24804, 316251, 3162510, 25827165,
	177100560, 1040465790, 5317936260, 23930713170, 95722852680,
	343006888770, 1108176102180, 3245372870670, 8654327655120,
	21094923659355, 47153358767970, 96926348578605, 183649923622620,
	321387366339585, 520341450264090, 780512175396135,
	1085929983159840, 1402659561581460, 1683191473897752,
	1877405874732108, 1946939425648112,
} /* 676 Entries */

//from: http://stackoverflow.com/questions/11032781/fastest-way-to-generate-binomial-coefficients
func binomial(n, k int) float64 {
	if 0 == k || n == k {
		return 1
	}
	if k > n {
		return 0
	}

	if k > (n - k) {
		k = n - k
	}
	if 1 == k {
		return float64(n)
	}

	if n <= 54 && k <= 54 {
		return bctable[(((n-3)*(n-3))>>2)+(k-2)]
	}
	// Last resort: actually calculate
	b := 1.0
	for i := 1; i <= k; i++ {
		b *= float64(n - (k - i))
		if b < 0 {
			return -1
		} // Overflow
		b /= float64(i)
	}
	return b
}

var thresholdReached bool = false

func sum(x int, p, l float64) float64 {
	var s float64 = 0
	var k int = 0
	if !thresholdReached {
		for k = 0; k <= x; k++ {
			binom := math.Log(binomial(x, k))
			pows := math.Pow(2, float64(x)) * math.Pow(p, float64(k)) * math.Pow(0.5-p, float64(x-k)) *
				math.Pow(1-math.Pow(p, float64(k))*math.Pow(0.5-p, float64(x-k)), l)
			s += math.Exp(math.Log(pows) + binom)
			if s >= 1.0-math.SmallestNonzeroFloat32 {
				thresholdReached = true
				s = 1.0
			}
		}
	} else {
		s = 1.0
	}
	return s
}

func mean(gc, l float64) float64 {
	var cp float64   // cumulative probability
	var p float64    // G/C-content of query
	var d float64    // maximum divergence
	var prob float64 // probability
	var m float64    // mean shustring length
	var x float64    // current shustring length
	var prevP1, curP1 float64

	thresholdReached = false
	p = gc
	cp = 0.0
	x = 0
	m = 0.0
	prevP1 = 0.0
	d = 1. - 2.*(p/2.*p/2.)
	for cp < 1.0-math.SmallestNonzeroFloat32 {
		x++
		curP1 = sum(int(x+1), p/2, l) // exact formula
		curP1 *= 1.0 - math.Pow(1.0-d, x)
		prob = curP1 - prevP1 // exact probability
		if prob < 0 {
			prob = 0
		}
		prevP1 = curP1
		m += x * prob
		cp += prob
	}
	return m
}

func variance(gc, l float64) float64 {
	var cp float64   // cumulative probability
	var p float64    // G/C-content of query
	var d float64    // maximum divergence
	var prob float64 // probability
	var m float64    // mean shustring length
	var x float64    // current shustring length
	var prevP1, curP1 float64

	thresholdReached = false
	p = gc
	cp = 0.0
	x = 0
	m = 0.0
	prevP1 = 0.0
	d = 1. - 2.*(p/2.*p/2.)
	for cp < 1.0-math.SmallestNonzeroFloat32 {
		x++
		curP1 = sum(int(x), p/2, l) // exact formula
		curP1 *= 1.0 - math.Pow(1.0-d, x)
		prob = curP1 - prevP1 // exact probability
		if prob < 0 {
			prob = 0
		}
		prevP1 = curP1
		cp += prob
		m += x * x * prob
	}
	e := mean(gc, l) + 1
	m -= e * e
	return m
}

// quant computes the quantile of the distribution of match complexity values assuming they are normally distributed.
// Source for variance estimation: Peter Pfaffelhuber's memo of May 18, 2018.
// Source for quantile computation: https://en.wikipedia.org/wiki/Normal_distribution, section "Quantile function".
// g: GC content
// l: genome length
// w: window length
// p: quantile
func quant(g, l, w, p float64) (float64, float64) {
	l *= 2 // forward & reverse strand
	m := mean(g, l)
	v := variance(g, l)
	//	v = v * w / m / (w - 2 * m) / (w - 2 * m) // exact
	v = v / m / w // approximate, ignoring C_i
	s := math.Sqrt(v)
	q := 1 + s*math.Sqrt(2)*math.Erfinv(2*p-1)
	return q, gauss(m, s, q)
}

func gauss(a, s, x float64) float64 {
	a = 1
	f := 1. / math.Sqrt(2.*math.Pi) / s * math.Exp(-1./2.*(x-a)*(x-a)/s/s)
	return f
}

func Quantile(a Args) {
	var q, f float64

	q, f = quant(a.Qg, a.Ql, a.Qw, a.Qp)
	w := new(tabwriter.Writer)
	w.Init(os.Stdout, 1, 8, 2, ' ', 0)
	fmt.Fprintf(w, "# SeqLen\tWinLen\tP\tQ\tF(Q)\n")
	fmt.Fprintf(w, "%g\t%v\t%v\t%g\t%g\n", a.Ql, a.Qw, a.Qp, q, f)
	w.Flush()
}
